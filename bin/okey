#!/usr/bin/env node

const Commander = require('commander')
const Chalk = require('chalk')
const Generator = require('../lib/generator')
const Fs = require('fs')

Commander
    .version(require('../package.json').version)
    .usage('[options]')
    .option('-p, --pattern [pattern]', 'Pattern to use for serial generation')
    .option('-s, --script [script]', 'Script file path for serial generation')
    .option('-o, --output-file [output-file]', 'Output file path')
    .option('-v, --verbose', 'Trigger verbose mode')
    .option('-c, --count [count]', 'Number of serials to generate [1]', 1)
    .parse(process.argv)

console.log(Chalk.green.bold('.: OKey Serial Generator :.'))

let promise = null
if (Commander.pattern) {
    console.log(`${Chalk.blue.bold('pattern')}: generating following pattern`)
    promise = Generator.generateWithPattern(Commander.pattern, Commander.count, Commander.verbose)
} else if (Commander.script) {
    console.log(`${Chalk.green.bold('script')}: generating following script`)
    promise = Generator.generateWithScript(Commander.script, Commander.count, Commander.verbose)
}

if (promise === null) {
    console.log(`${Chalk.red.bold('error')}: cannot generate without a pattern or a script`)
    process.exit(1)
}

promise
    .then((keys) => {
        let output = Fs.createWriteStream(Commander.outputFile)
        output.write(keys.join('\r\n'))
        return true
    })
    .then(() => {
        console.log(Chalk.green.bold('Finished successfully.'))
    })
    .catch((err) => {
        console.log(`${Chalk.red.bold('error')}: ${err.message}`)
        Fs.createWriteStream('okey-debug.log').write(err.stack)
    })
